package com.example2microservice.departmentservice.controller;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example2microservice.departmentservice.model.Department;
import com.example2microservice.departmentservice.model.DepartmentEmployeeDetails;
import com.example2microservice.departmentservice.model.Employee;
import com.example2microservice.departmentservice.service.ApiToEmployee;
import com.example2microservice.departmentservice.service.DepartmentService;

@RestController
@RequestMapping("/department")
public class DepartmentController {

	@Autowired
	private DepartmentService departmentService;
	
	@Autowired
	private ApiToEmployee apiToEmployee;
	
	/*
	 * @Autowired private EmployeeClient employeeClient;
	 */
	
	
	@GetMapping
	public List<Department> getAllDepartments(){
		
		return departmentService.getAllDepartments();
	}
	
	@PostMapping
	public Department saveDepartment(@RequestBody Department department){
		
		return departmentService.saveDepartment(department);
	}
	
	@GetMapping("/{id}")
	public Optional<Department> getDepartment(@PathVariable("id") Long id) {
		
		return departmentService.getDepartment(id);
	}
	
	@GetMapping("/employees")
//	public DepartmentEmployeeDetails getDepartmentEmployees() {
//	public List<Department> getDepartmentEmployees() {
	public Employee[] getEmployees() {
		
		// List<Department> departments = departmentService.getDepartmentEmployees();
		
		//fetch all departments
		 List<Department> departments = departmentService.getAllDepartments();
		 
		// fetch all employees
		Employee[] emp = apiToEmployee.employees();
		List<Employee> empList =Arrays.asList(emp);
		/*
		 * departments.forEach(department -> department.getId() )
		 * DepartmentEmployeeDetails ded = new DepartmentEmployeeDetails(); return ded;
		 */
		DepartmentEmployeeDetails ded = new DepartmentEmployeeDetails();
		
		
		/*
		 * empList.forEach(emp -> System.out.println(emp.getDepartmentId()
		 * .equals(departments.stream().map(department -> { department.getId() }).c )));
		 */
		// departments.stream().findFirst()
		
		// check department id from departments in employees
//		departments.forEach(department -> {
//			empList.stream().filter(emp -> emp.getDepartmentId().equals(department.getId())).collect(Collectors.toList())
//			empList.contains(department.getId())
			
//		});
		// set department details and employee details in ded object 
		
		//return ded 
		departments.forEach(department -> {
		
			
		//	ded.setEmployees(apiToEmployee.employeeDetails(department.getId())
		});
	//	return departments;
		return emp;
	}
	/*
	 * @GetMapping("/with-employees") public List<Department>
	 * findAllWithEmployees(){ List<Department> departments =
	 * departmentService.findAll(); departments.forEach(department ->
	 * department.setEmployees(
	 * employeeClient.getEmployeesByDepartment(department.getId()) ));
	 
		
		return departments;
		
	}*/
	
	
	
}
